# -*- coding: utf-8 -*-
"""binary_gridsearch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tfwP0iNw0yVPAhQRk1WL91QogwSsUX4f

# パラメータ探索


データ分割方法
*   gg: (train)g, (test)g :leave one out～train:g(test以外:パラメータ探索/test: g(1)
*   kk: (train)k, (test)k :leave one out～train: k(test以外:パラメータ探索)/test: k(1)
*   gk: (train:パラメータ探索)g/(test)k :all
*   kg: (train:パラメータ探索)k/(test)g :all

**参考：予備実験で使用したモデル**

    SVC(kernel='rbf', probability=True, random_state=42),
    RandomForestClassifier(criterion='gini', max_depth=1, n_estimators=10, random_state=42),
    tree.DecisionTreeClassifier()
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import scipy.stats
from sklearn import preprocessing
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn import tree
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import LeaveOneOut
loo = LeaveOneOut()

# 元データ:下記ファイル
gakkaiF = 230923_g_bi_add_format_del_url.csv
kikanF = 230923_k_bi_add_format_del_url.csv

PATH_gakkaiF = gakkaiFのpath
PATH_kikanF = kikanFのpath

# 特徴量
features_6 = ['trial_max', 'serious_adverse_effect_number_mean', 'price_mean', 'warn', 'contra', 'GE']

"""# **分割・scaling: leave one out for gg/kk**"""

# leave one out & scaling: gg/kk
def split_loov(PATH, features):
    df_0 = pd.read_csv(PATH)
    df = df_0.dropna()
    LOOV_list = []

    for train_index, test_index in loo.split(df):
      X_train, X_test = df.loc[:, features].values[train_index], df.loc[:, features].values[test_index]
      y_train, y_test = df['rank'][train_index].values, df['rank'].values[test_index]

    # X_train:平均0、分散1に正規化（標準化）
      ss = preprocessing.StandardScaler()
      X_train_ss = ss.fit_transform(X_train)

    # X_test:X_trainの平均、分散で正規化（標準化）
      mean = X_train.mean()
      std = X_train.std(ddof=0)
      X_test_ss = (X_test - mean) / std  #ddof=0:nで割る標準偏差
      # print(X_test_ss)
      # return X_test_ss

      LOOV = [X_train_ss, X_test_ss, y_train, y_test]
      LOOV_list.append(LOOV)
    return LOOV_list

# scaling: gk/kg
def split(train_PATH, test_PATH, features):
    df_train_0 = pd.read_csv(train_PATH)
    df_train = df_train_0.dropna()

    df_test_0 = pd.read_csv(test_PATH)
    df_test = df_test_0.dropna()

    X_train, X_test = df_train.loc[:, features].values, df_test.loc[:, features].values
    y_train, y_test = df_train['rank'].values, df_test['rank'].values

    # X_train:平均0、分散1に正規化（標準化）
    ss = preprocessing.StandardScaler()
    X_train_ss = ss.fit_transform(X_train)

    # X_test:X_trainの平均、分散で正規化（標準化）
    mean = X_train.mean()
    std = X_train.std(ddof=0)
    X_test_ss = (X_test - mean) / std  #ddof=0:nで割る標準偏差
    # print(X_test_ss)
    # return X_test_ss

    return X_train_ss, X_test_ss, y_train, y_test

# hyper-parameter tuning
def gridsearch(grid, default, X_train_ss, X_test_ss, y_train, y_test):
    max_score = 0
    for model, param in grid.items():
        clf = GridSearchCV(model, param, cv=2)
        clf.fit(X_train_ss, y_train)
        pred_y = clf.predict(X_test_ss)
        score = accuracy_score(y_test, pred_y)

        if max_score < score:
            max_score = score

    #ハイパーパラメータを調整しない場合との比較
    model = default
    model.fit(X_train_ss, y_train)
    score = model.score(X_test_ss, y_test)
    return  ["ベストスコア:{}".format(max_score),"モデル:{}".format(model.__class__.__name__),"パラメーター:{}".format(clf.best_params_),"デフォルトスコア:{}".format(score),pred_y,y_test]

# grid
SVC_grid = {SVC(): {"C": [2*i for i in range(1, 6)],'kernel': ['rbf', 'linear'],"random_state": [42]}}
SVC_default = SVC(kernel='rbf', probability=True, random_state=42)

DT_grid = {tree.DecisionTreeClassifier(): { 'criterion': ['gini'], 'splitter': ['random'], 'max_depth': [1],
                                           'min_samples_split': [2],'min_samples_leaf': [i for i in [2,3,8,9,10]],'random_state': [42]}}
DT_default = tree.DecisionTreeClassifier()

RF_grid = {RandomForestClassifier(): {'criterion': ['gini'], 'max_depth': [i*2 for i in range(1, 5)],'n_estimators':[i*2 for i in range(1, 50)],'random_state':[42]}}
RF_default = RandomForestClassifier(criterion='gini', max_depth=1, n_estimators=10, random_state=42)

"""# **gg/kk:LOOV**"""

data_list = split_loov(PATH_gakkaiF, features_6)
data_list = split_loov(PATH_kikanF, features_6)
# 結果ファイル名も変更

DT_results = []
RF_results = []
SVC_results = []

for data in data_list:

  X_train_ss = data[0]
  X_test_ss = data[1]
  y_train = data[2]
  y_test = data[3]

  DT_result = gridsearch(DT_grid, DT_default, X_train_ss, X_test_ss, y_train, y_test)
  DT_results.append(DT_result)
  # print(DT_results)

  RF_result = gridsearch(RF_grid, RF_default, X_train_ss, X_test_ss, y_train, y_test)
  RF_results.append(RF_result)
  # print(RF_results)

  SVC_result = gridsearch(SVC_grid, SVC_default, X_train_ss, X_test_ss, y_train, y_test)
  SVC_results.append(SVC_result)
  # print(SVC_results)

df_DT = pd.DataFrame(DT_results)
df_DT.to_csv(r'/content/drive/Shareddrives/知識獲得システム研究室/Home/sachikoishikawa/experiment_1/data/result_kk_f6_DT.csv')

df_RF = pd.DataFrame(RF_results)
df_RF.to_csv(r'/content/drive/Shareddrives/知識獲得システム研究室/Home/sachikoishikawa/experiment_1/data/result_kk_f6_RF.csv')

df_SVC = pd.DataFrame(SVC_results)
df_SVC.to_csv(r'/content/drive/Shareddrives/知識獲得システム研究室/Home/sachikoishikawa/experiment_1/data/result_kk_f6_SVC.csv')

"""# **gk/kg**"""

data = split(PATH_gakkaiF, PATH_kikanF, features_6)
data = split(PATH_kikanF, PATH_gakkaiF, features_6)
# 結果ファイル名変更

DT_results = []
RF_results = []
SVC_results = []

X_train_ss = data[0]
X_test_ss = data[1]
y_train = data[2]
y_test = data[3]

DT_result = gridsearch(DT_grid, DT_default, X_train_ss, X_test_ss, y_train, y_test)
DT_results.append(DT_result)
print(DT_results)
df_DT = pd.DataFrame(DT_results)
df_DT.to_csv(r'/content/drive/Shareddrives/知識獲得システム研究室/Home/sachikoishikawa/experiment_1/data/result_kg_f6_DT.csv')

SVC_result = gridsearch(SVC_grid, SVC_default, X_train_ss, X_test_ss, y_train, y_test)
SVC_results.append(SVC_result)
print(SVC_results)
df_SVC = pd.DataFrame(SVC_results)
df_SVC.to_csv(r'/content/drive/Shareddrives/知識獲得システム研究室/Home/sachikoishikawa/experiment_1/data/result_kg_f6_SVC.csv')

RF_result = gridsearch(RF_grid, RF_default, X_train_ss, X_test_ss, y_train, y_test)
RF_results.append(RF_result)
print(RF_results)
df_RF = pd.DataFrame(RF_results)
df_RF.to_csv(r'/content/drive/Shareddrives/知識獲得システム研究室/Home/sachikoishikawa/experiment_1/data/stat_result_gk_f6_RF.csv')